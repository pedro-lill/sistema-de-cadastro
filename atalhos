git log --oneline
    para ver os commits feitos

    git log --oneline --graph
    para ver os commits feitos em forma de grafico

git restore --source <hash> .nomeArquivo
    para restaurar um arquivo para --um commit especifico

git restore --source <hash> .
    para restaurar todos os arquivos para um commit especifico


git log --oneline
    os commits possuem hashs que os identificam de uma forma única

git log -p
    para ver as alterações feitas em cada commit

git log --author="user_name"
    para ver os commits feitos por um usuário especifico

git log --since=1.month.ago --until=1.day.ago
    para ver os commits feitos em um intervalo de tempo

git log --pretty="format:%h %s"
    para ver os commits feitos em um intervalo de tempo

--grep="Merge pull request"   # in commit messages
    -S"console.log"               # in code
    -G"foo.*"                     # in code (regex)
    --invert-grep
    --all-match                   # AND in multi --grep


    Você também pode configurar o git clone e clonar o repositório a partir de uma branch específica, diferente da original dessa forma:
git clone -branch new_feature <repositorio>


Para verificar as modificações realizadas:

1- Utilize o comando 
    git status, 
ele serve para listar todos os arquivos que foram modificados.
2 - Para adicionar as mudanças ao seu repositório local:

Para adicionar todas as modificações realizadas de uma só vez, é necessário usar git add . 
    (git add e um ponto) 
e, para adicionar as mudanças em algum arquivo específico, usa-se git add nome-do-arquivo-alterado.

3 - Para salvar as alterações:
Utilize o comando 
    git commit,
ele é usado quando queremos capturar e salvar o estado atual do repositório.
4 - Para enviar as modificações ao repositório remoto:
Utilize o comando 
    git push,
ele é utilizado para envio das alterações gravadas no diretório local para o repositório remoto.

git restore

Aprendemos a trabalhar com essa parte de restauração de arquivos e do projeto, voltando para um estado anterior através do git restore;
git add

Aprendemos a adicionar os arquivos que queremos para o próximo commit através do git add.


Caminho 1: criar uma branch para cada aula do curso com o comando:
    git checkout -b nome-da-branch
Com esse comando, você cria uma nova branch e muda automaticamente para ela para dar início ao desenvolvimento.

Caminho 2: criar uma branch para cada aula do curso com o comando:
    git branch nome-da-branch
Essa é outra forma de criar uma branch. Nesse caso, ela é criada, mas não há a mudança automática para 
esta nova ramificação. Para isso, você pode usar o comando 
    git switch nome-da-branch.



git add . : Para adicionar todas as modificações realizadas de uma só vez;
git commit -m “mensagem do commit” : usado quando queremos capturar e salvar o estado atual do repositório;
git status: serve para listar todos os arquivos que foram modificados;
git push: utilizado para envio das alterações gravadas no diretório local para o repositório remoto. É utilizado para atualizar o repositório remoto com os commits feitos no repositório local;
git restore: trabalha com a restauração de arquivos e do projeto, voltando para um estado anterior através;
git log: exibe o histórico de commits do repositório. Mostra informações como o autor do commit, data, hora e mensagem associada a cada commit;
git log --oneline : mostra o log de forma resumida, em apenas uma linha;
git clone: clona um repositório para o seu ambiente local. É utilizado para obter uma cópia completa do repositório, incluindo todos os arquivos e histórico de commits. É utilizado quando você deseja obter uma cópia completa de um repositório remoto para começar um novo projeto ou colaborar com um projeto existente;
git branch: cria, lista ou exclui branches. Um branch é uma ramificação do histórico de commits, permitindo trabalhar em paralelo em diferentes versões do projeto;
git checkout: altera o branch atual ou restaura arquivos. É utilizado para alternar entre branches existentes ou restaurar arquivos para uma versão anterior. Atenção: é um comando que tem mais de uma função, se você quiser apenas trocar de branch sem alterar modificações, você pode utilizar o git switch;
git checkout -b “informe_o_nome_da_branch”: Cria uma nova branch e muda para ela;
git switch “nome_da_branch”: troca de uma branch para outra sem realizar alterações de estado. Observação: comando ainda em fase de experimentação;
git merge: mescla alterações de um branch para outro. É utilizado para combinar as alterações feitas em um branch com outro, integrando as modificações;
git pull: atualiza o repositório local com as alterações do repositório remoto. Quando você já possui uma cópia do repositório em seu computador e deseja trazer as últimas alterações feitas por outros colaboradores para sincronizá-las com seu repositório local. É diferente do git clone, que faz um clone do repositório remoto na sua máquina.
git fetch: busca as alterações do repositório remoto, mas não as mescla com o branch atual. É para obter informações mais recentes do repositório e verificar se há mudanças. Diferente do git pull , que já copia as alterações do repositório remoto;
git diff: mostra as diferenças entre arquivos ou commits;
git reset: desfaz commits ou altera o estado do repositório;
git remote: gerencia repositórios remotos;
No artigo O que é Git e Github: como configurar e primeiros passos você encontra o básico sobre Git e Github e também uma listinha com os principais comandos.

Na documentação oficial do Git você encontra uma lista com todos os comandos e suas especificações em Português!
 